Упражнение 3: Создание пользовательского исключения и реализация системы бронирования
Задача:

1) Создайте собственное исключение RoomUnavailableException, наследуясь от Exception,
которое будет указывать на то, что запрошенная комната недоступна для бронирования.

2) Создайте класс HotelReservationSystem со следующим функционалом:
Список (или массив) номеров комнат, а также информация о том, занята комната или свободна.
Метод reserveRoom(int roomNumber, String guestName), который:
Проверяет корректность входных данных (как в Упражнении 1).
Проверяет, свободна ли комната. Если занята — выбрасывает RoomUnavailableException с подробным сообщением.
Если комната свободна, помечает её как занятую.
Метод cancelReservation(int roomNumber), который:
Если такой комнаты нет, выбрасывает IllegalArgumentException.
Если комната уже свободна, выбрасывайте RoomUnavailableException (или создайте дополнительное исключение, например NoActiveReservationException) с сообщением «Нельзя отменить несуществующее бронирование».
Если комната занята, делает её свободной.

3) В методе main:
Создайте объект HotelReservationSystem с набором комнат.
Проверьте работу методов reserveRoom и cancelReservation в различных сценариях:
Нормальное бронирование.
Повторная попытка забронировать уже занятую комнату.
Попытка отменить бронь на свободной комнате.
Попытка отменить бронь на несуществующей комнате.
Для всех выбрасываемых исключений реализуйте обработку try-catch, выводя понятные сообщения для пользователя.

Подсказки:
При проектировании пользовательского исключения обязательно вызывайте конструктор суперкласса super(message).
Можно хранить информацию о комнатах в структуре вида Map<Integer, Boolean> (номер комнаты → занята/свободна) или использовать два массива (номера и статусы).
Не забудьте протестировать крайние случаи.