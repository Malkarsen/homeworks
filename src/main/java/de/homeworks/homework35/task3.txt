Упражнение 3: Создание пользовательского исключения и реализация системы резервирования авиабилетов

Часть A: Исключение SeatUnavailableException
Создайте пользовательское исключение SeatUnavailableException, наследуя его от Exception.
Конструктор должен принимать String message и передавать его в конструктор суперкласса (super(message)).

Часть B: Класс AirlineReservationSystem
1) В этом классе храните данные о рейсах и доступности мест.
Используйте Map<String, Map<Integer, Boolean>>, где:
Ключ первого уровня — номер рейса.
Значение — Map<Integer, Boolean>, указывающая, какое место занято (true) или свободно (false).

2) Метод reserveSeat(String flightNumber, int seatNumber, String passengerName):
Проверяет корректность входных данных (номер рейса не пустой, место > 0, имя пассажира не пустое).
Проверяет, что такой рейс существует. Если нет, выбрасывает IllegalArgumentException.
Проверяет, что в Map для этого рейса есть ключ seatNumber. Если нет, кидает IllegalArgumentException.
Если seatNumber уже занято, выбрасывает SeatUnavailableException.
Иначе помечает место как занятое и выводит сообщение об успешном бронировании.

3) Метод cancelReservation(String flightNumber, int seatNumber):
Проверяет, существует ли рейс.
Проверяет, существует ли место.
Если место уже свободно, выбрасывает SeatUnavailableException (или создайте NoActiveReservationException).
Иначе освобождает место.

4) В методе main:
Инициализируйте систему несколькими рейсами (например: "SU100" → {1→false, 2→false, 3→false}, "BA202" → {10→false, 11→false} и т.д.).
Проверьте работу reserveSeat и cancelReservation в различных сценариях.
Перехватывайте все исключения в try-catch.

Дополнительные идеи для расширения
1) Валидация формата номера рейса
Допустим, номер рейса должен соответствовать регулярному выражению (например, две буквы и до четырёх цифр).
Если формат не совпадает, выбрасывайте IllegalArgumentException.

2) Создание собственной иерархии исключений
Например, FlightException как базовый класс для всех авиа-исключений, а SeatUnavailableException, NoSuchFlightException как наследники.

3) Сохранение данных
Хранить информацию не только о занятости мест, но и о пассажирах (Map: flight → seat → passengerName).
Если место занято, то seat → "Max Mustermann", если свободно, то seat → null.
В таком случае, при попытке бронирования смотрим, не null ли там значение; если уже есть имя, значит место занято.