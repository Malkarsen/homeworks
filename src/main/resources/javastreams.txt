Поток Stream

1 Создать поток из источника, например из коллекции
2 Указать одну или несколько промежуточных операции (filter, sorted, distinct - убираем дубликаты)
3 Завершить поток терминальной операцией (нельзя остановиться на промежуточной операции) (collect)

Промежуточные операции:
1) filter оставляет только те элементы, для которых предикат возвращает true
2) map преобразует каждый элемент потока в новых элемент
3) flatmap применяется при необходимости преобразовать каждый элемент в поток элементов,
    а затем объединить всё в общий поток
4) distinct удаляет дубликаты, используя метод equals(), оставляя уникальные элементы
5) sorted сортирует элементы в естественном порядке(буквы - алфавитном порядке, цифры - в порядке возрастания)
6) limit ограничивает поток первыми элементами

Терминальные операции:
1) collect собирает элементы в единую структуру, например в List, и выполняет роль агрегатора
    Collectors.toList() Collectors.toSet
2) count возвращает количество элементов в потоке (тип long)
3) min max возвращает минимальный или максимальный элемент потока

Матчинговые операции:
1) anyMatch вернёт true, если хотя бы один элемент true
2) anyMatch вернёт true, если все элементы true
3) anyMatch вернёт true, если ни один из элементов не удовлетворяет условию


Когда использовать Stream API
1) Источник данных --> коллекция или объект, содержащий элементы
2) Выполнение преобразований --> фильтрация, сортировка, мэппенг и иные подобные операции
3) Сохранение результата --> сохранение в новый объект (лист или хранилище)